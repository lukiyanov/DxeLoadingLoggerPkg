/** @file
 * Содержит описание типа LOGGER и набор операций над ним.
 * Тип предназначен для сбора и хранения информации о процессе загрузки.
 */
#include <Uefi.h>
#include <Library/LoadingEvent.h>
#include <Library/VectorLib.h>
#include <Library/EventProviderLib.h>

#ifndef LOGGER_LIB_H_
#define LOGGER_LIB_H_

// -----------------------------------------------------------------------------
typedef struct {
  VECTOR         LogData;       // тип = LOADING_EVENT
  EVENT_PROVIDER EventProvider;
} LOGGER;

// -----------------------------------------------------------------------------
/**
 * Инициализирует структуру LOGGER.
 * Функция должна быть обязательно однократно вызвана перед использованием объекта.
 *
 * @param This                      Указатель на структуру логгера, для которой выполняется инициализация.
 *
 * @retval EFI_SUCCESS              Операция завершена успешно.
 * @retval Любое другое значение    Произошла ошибка, объект не инициализирован.
 */
EFI_STATUS
Logger_Construct (
  LOGGER *This
  );

// -----------------------------------------------------------------------------
/**
 * Освобождает память из-под структуры.
 * Функция должна быть обязательно однократно вызвана после завершения использования объекта.
 */
VOID
Logger_Destruct (
  LOGGER *This
  );

// -----------------------------------------------------------------------------
/**
 * Логгер коннектится к системе и начинает сбор событий.
 *
 * @retval EFI_SUCCESS              Логгер успешно законнектился.
 * @retval Любое другое значение    Произошла ошибка, логгер в том же состоянии что и до вызова функции.
 */
EFI_STATUS
Logger_Start (
  LOGGER *This
  );

// -----------------------------------------------------------------------------
/**
 * Отсоединяется от системы и прекращает сбор событий.
 * Уже собранные события остаются доступны.
 */
VOID
Logger_Stop (
  LOGGER *This
  );

// -----------------------------------------------------------------------------

#endif // LOGGER_LIB_H_