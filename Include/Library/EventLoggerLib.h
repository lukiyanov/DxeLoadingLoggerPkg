/** @file
 * Содержит описание типа LOGGER и набор операций над ним.
 * Тип предназначен для сбора и хранения информации о процессе загрузки.
 */
#include <Uefi.h>
#include <Library/LoadingEvent.h>
#include <Library/VectorLib.h>
#include <Library/EventProviderLib.h>

#ifndef LOGGER_LIB_H_
#define LOGGER_LIB_H_

// -----------------------------------------------------------------------------
/**
 * Функция обратного вызова, вызывается при поступлении события.
*/
typedef
VOID
(*EVENT_INCOMED_FUNC) (
  IN LOADING_EVENT *Event
  );

// -----------------------------------------------------------------------------
typedef struct {
  VECTOR              LogData;                // тип элемента = LOADING_EVENT
  EVENT_PROVIDER      EventProvider;
  EVENT_INCOMED_FUNC  EventIncomedCallback;
} LOGGER;

// -----------------------------------------------------------------------------
/**
 * Инициализирует структуру LOGGER.
 * Функция должна быть обязательно однократно вызвана перед использованием объекта.
 *
 * @param This                      Указатель на структуру логгера, для которой выполняется инициализация.
 * @param EventIncomed              Функция. которая будет вызываться сразу при поступлении события.
 *                                  NULL, если не нужно.
 *
 * @retval EFI_SUCCESS              Операция завершена успешно.
 * @retval Любое другое значение    Произошла ошибка, объект не инициализирован.
 */
EFI_STATUS
Logger_Construct (
  IN OUT LOGGER              *This,
  IN     EVENT_INCOMED_FUNC  EventIncomed  OPTIONAL
  );

// -----------------------------------------------------------------------------
/**
 * Освобождает память из-под структуры.
 * Функция должна быть обязательно однократно вызвана после завершения использования объекта.
 */
VOID
Logger_Destruct (
  IN OUT LOGGER *This
  );

// -----------------------------------------------------------------------------
/**
 * Логгер коннектится к системе и начинает сбор событий.
 *
 * @retval EFI_SUCCESS              Логгер успешно законнектился.
 * @retval Любое другое значение    Произошла ошибка, логгер в том же состоянии что и до вызова функции.
 */
EFI_STATUS
Logger_Start (
  IN OUT LOGGER *This
  );

// -----------------------------------------------------------------------------
/**
 * Отсоединяет структуру логгера от системы и прекращает сбор событий.
 * Уже собранные события остаются доступны.
 */
VOID
Logger_Stop (
  IN OUT LOGGER *This
  );

// -----------------------------------------------------------------------------
/**
 * Возвращает текущее количество находящихся в логе событий.
 */
UINTN
Logger_GetEventCount(
  IN LOGGER *This
  );

// -----------------------------------------------------------------------------
/**
 * Возвращает находящееся в логе событие с индексом Index.
 *
 * @param  This    Структура лога, над которой выполняется действие.
 * @param  Index   Индекс события в логе, должен быть в пределах [0, Logger_GetEventCount() - 1]
 * @param  Event   Записывает туда указанное событие.
 *
 * @retval EFI_SUCCESS           Операция завершена успешно.
 * @return EFI_INVALID_PARAMETER Index >= Logger_GetEventCount()
 */
EFI_STATUS
Logger_GetEvent(
  IN  LOGGER        *This,
  IN  UINTN         Index,
  OUT LOADING_EVENT *Event
  );

// -----------------------------------------------------------------------------

#endif // LOGGER_LIB_H_